import NextAuth from "next-auth"
import { DrizzleAdapter } from "@auth/drizzle-adapter"
import { db } from "./db"

import type { Provider } from "next-auth/providers"
import Credentials from "next-auth/providers/credentials"

import { CredentialsSignin, type NextAuthConfig } from "next-auth"
import GitHub from "next-auth/providers/github"
import { DEFAULT_LOGIN_REDIRECT, apiAuthPrefix, authRoutes, publicRoutes } from "@/route"
import { NextResponse } from "next/server"

class InvalidLoginError extends CredentialsSignin {
  code = "Invalid identifier or password"
}

const providers: Provider[] = [
  GitHub,
  Credentials({
    credentials: {
      username: { label: "Username" },
      password: { label: "Password", type: "password" },
    },
    async authorize(credentials) {
      let user = null

      // // logic to salt and hash password
      // const pwHash = saltAndHashPassword(credentials.password)

      // // logic to verify if user exists
      // user = await getUserFromDb(credentials.email, pwHash)
      user = {
        id: "1",
        name: credentials.username as string,
        email: ""
      }

      if (!user) {
        // No user found, so this is their first attempt to login
        // meaning this is also the place you could do registration
        throw new InvalidLoginError()
      }

      // return user object with the their profile data
      return user
    },
  }),
]

export const providerMap = providers.map((provider) => {
  if (typeof provider === "function") {
    const providerData = provider()
    return { id: providerData.id, name: providerData.name }
  } else {
    return { id: provider.id, name: provider.name }
  }
})

export const authConfig = {
  secret: process.env.AUTH_SECRET || "very secure secret",
  theme: { logo: "https://authjs.dev/img/logo-sm.png" },
  providers,
  adapter: DrizzleAdapter(db),
  pages: {
    // signIn: "/signin",
  },
  callbacks: {
    authorized({ auth, request }) {
      const { nextUrl } = request;
      const isLoggedIn = !!auth?.user;
      const paths = ["/cycle", "/profile"];
      const isApiAuthRoute = nextUrl.pathname.startsWith(apiAuthPrefix);
      const isPublicRoute = publicRoutes.includes(nextUrl.pathname);
      const isAuthRoute = authRoutes.includes(nextUrl.pathname);
      const isProtected = paths.some((path) => nextUrl.pathname.startsWith(path))

      if (isPublicRoute) {
        return NextResponse.redirect(new URL(DEFAULT_LOGIN_REDIRECT, request.url))
      }

      if (isProtected && !isLoggedIn) {
        const redirectUrl = new URL("api/auth/signin", nextUrl.origin)
        redirectUrl.searchParams.append("callbackUrl", nextUrl.href)
        return Response.redirect(redirectUrl)
      }

      return true
    },
  },
} satisfies NextAuthConfig

export const { handlers, auth, signIn, signOut } = NextAuth(authConfig)
